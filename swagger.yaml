swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Mongo-Server
  
tags:
- name: products
  description: Products methods
- name: users
  description: Users methods
- name: cities
  description: Cities methods

paths:
  /products:
    get:
      tags: 
        - products
      summary: Return all products
      produces:
        - application/json
      responses:
        200:
          description: All products have been returned
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        500:
          $ref: '#/responses/DBError'
    post:
      tags: 
        - products
      summary: Add the product
      produces:
        - application/json
      parameters:
        - in: body
          name: product
          description: Product item to add
          schema:
            $ref: '#/requests/BodyProduct'
      responses:
        200:
          description: Product item has been added
          schema:
            $ref: '#/definitions/Product'
        500:
          $ref: '#/responses/DBError'
  /products/{id}:
    get:
      tags: 
        - products
      summary: Return the product by id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: Product's identifier
          required: true
          type: string
      responses:
        200:
          description: The found item has been returned
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Item wasn't found
        500:
          $ref: '#/responses/DBError'
    delete:
      tags: 
        - products
      summary: Delete the product by id
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: The poduct has been deleted
        required: true
        type: string
      responses:
        200:
          description: Return removed product
          schema:
            type: object
            properties: {}
        404:
          description: Item wasn't found
        500:
          $ref: '#/responses/DBError'
  /users:
    get:
      tags: 
        - users
      summary: Return all users
      produces:
        - application/json
      responses:
        200:
          description: Users have been returned
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        500:
          $ref: '#/responses/DBError'
  /users/{id}:
    delete:
      tags:
        - users
      summary: Remove user by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User by id has been deleted
          required: true
          type: string
      responses:
        200:
          description: Return removed user
          schema:
            type: Object
            properties: {}
        404:
          description: Item wasn't found
        500:
          $ref: '#/responses/DBError'
  /cities:
    get:
      tags: 
        - cities
      summary: Return all cities
      produces:
        - application/json
      responses:
        200:
          description: Cities have been returned
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        500:
          $ref: '#/responses/DBError'
    post:
      tags:
        - cities
      summary: Add a city to the system
      produces:
        - application/json
      parameters:
        - in: body
          name: city
          description: City item to add
          required: false
          schema:
            $ref: "#/definitions/City"
      responses:
        201:
          description: Item has been created
        400:
          description: Invalid input
        500:
          $ref: '#/responses/DBError'
  /city:
    get:
      tags: 
        - cities
      summary: Return random city
      produces:
        - application/json
      responses:
        200:
          description: Randon city has been returned
          schema:
            type: object
            properties: {}
        500:
          $ref: '#/responses/DBError'
  /cities/{id}:
    put:
      tags:
        - cities
      summary: Modify a city or create new one
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Pass an id of city
          required: true
          type: string
        - in: body
          name: city
      description: City item to add
      required: false
      schema:
          $ref: "#/definitions/City"
      responses:
        201:
          description: Item has been modified or created
        400:
          description: Invalid input
    delete:
      tags:
        - cities
      summary: Remove city by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Pass an id of city
          required: true
          type: string
      responses:
        200:
          description: Return removed city
          schema:
            type: object
            properties: {}
        404:
          description: Item wasn't found

requests:
  BodyProduct:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Potato

responses:
  DBError:
    description: database error
    schema:
      type: object
      properties:
        error:
          type: string
          example: Client is not connected to the database.
      
definitions:
  Product:
    type: object
    properties:
      _id:
        type: string
        format: uuid
        example: 5b4de63ca37ef415b7d0206f
      name:
        type: string
        example: Potato
      lastModifiedDate:
        type: string
        format: int32
        example: 2019-03-24T09:12:33.001Z

  User:
    type: object
    properties:
      _id:
        type: string
        format: uuid
        example: 5b4de63ca37ef415b7d0206f
      firstName:
        type: string
        example: Bob
      lastName:
        type: string
        example: B
      email:
        type: string
        example: Bob_B@b.com
      password:
        type: string
        example: 1234password
      lastModifiedDate:
        type: string
        format: int32
        example: 2019-03-24T09:12:33.001Z

  City:
    type: object
    properties:
      location:
        $ref: '#/definitions/Location'
      _id:
        type: string
        format: uuid
        example: 5b4de63ca37ef415b7d0206f
      name:
        type: string
        example: Minsk
      country:
        type: string
        example: Belarus
      capital:
        type: boolean
        example: true
  
  Location:
    type: object
    required:
      - name
      - price
    properties:
      lat:
        type: float
        example: 52.097621
      long:
        type: float
        example: 23.73405

host: localhost:8080
basePath: /api
schemes:
  - http